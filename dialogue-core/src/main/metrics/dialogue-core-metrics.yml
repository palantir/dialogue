options:
  javaPackage: com.palantir.dialogue.core
  javaVisibility: packagePrivate
namespaces:
  client:
    docs: General client metrics produced by dialogue. These metrics are meant to be applicable to all conjure clients
          without being implementation-specific.
    metrics:
      response:
        type: timer
        tags: [channel-name, service-name]
        docs: Request time, note that this does not include time spent reading the response body.
      response.error:
        type: meter
        tags: [channel-name, service-name, reason]
        docs: Rate of errors received by reason and service-name. Currently only errors with reason `IOException` are reported.
      deprecations:
        type: meter
        tags: [service-name]
        docs: Rate of deprecated endpoints being invoked.
  dialogue.client:
    docs: Dialogue client response metrics.
    metrics:
      response.leak:
        type: meter
        tags: [client-name, service-name, endpoint]
        docs: Rate that responses are garbage collected without being closed. This should only occur in the case of a programming error.
      request.active:
        type: counter
        tags: [channel-name, service-name, stage]
        docs:
          Number of requests that are actively running. The `stage` may refer to `running` requests actively
          executing over the wire or `processing` which may be awaiting a client or backing off for a retry.
          Note that running requests are also counted as processing.
      request.retry:
        type: meter
        tags: [channel-name, reason]
        docs: Rate at which the RetryingChannel retries requests (across all endpoints).
      requests.queued:
        type: counter
        tags: [channel-name]
        docs: Number of queued requests waiting to execute.
      request.queued.time:
        type: timer
        tags: [channel-name]
        docs: Time spent waiting in the queue before execution.
      limited:
        type: meter
        tags: [channel-name, reason]
        docs: Rate that client-side requests are deferred to be retried later.

  dialogue.concurrencylimiter:
    docs: Instrumentation for the ConcurrencyLimitedChannel
    metrics:
      max:
        type: gauge
        tags: [channel-name, hostIndex]
        docs: The maximum number of concurrent requests which are currently permitted. Additively increases with successes and multiplicatively decreases with failures.

  dialogue.pinuntilerror:
    docs: Instrumentation for the PIN_UNTIL_ERROR node selection strategy.
    metrics:
      success:
        type: meter
        tags: [channel-name, hostIndex]
        docs: Meter of the requests that were successfully made, tagged by the index of the inner channel. (Note if there are >10 nodes this metric will not be recorded).
      nextNode:
        type: meter
        tags: [channel-name, reason]
        docs: Marked every time we switch to a new node, includes the reason why we switched (limited, responseCode, throwable).
      reshuffle:
        tags: [channel-name]
        type: meter
        docs: Marked every time we reshuffle all the nodes.

  dialogue.roundrobin:
    docs: Instrumentation for the ROUND_ROBIN node selection strategy (currently implemented by BalancedChannel).
    metrics:
      success:
        type: meter
        tags: [channel-name, hostIndex]
        docs: Meter of the requests that were successfully made, tagged by the index of the host. (Note if there are >10
          nodes this metric will not be recorded).

  dialogue.balanced:
    docs: Instrumentation for BalancedChannel internals.
    metrics:
      score:
        type: gauge
        tags: [channel-name, hostIndex]
        docs: The score that the BalancedChannel currently assigns to each host (computed based on inflight requests and
          recent failures). Requests are routed to the channel with the lowest score. (Note if there are >10 nodes this
          metric will not be recorded).
