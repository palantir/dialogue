package com.palantir.myservice.service;

import com.google.common.collect.ListMultimap;
import com.google.common.util.concurrent.ListenableFuture;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.Deserializer;
import com.palantir.dialogue.DialogueServiceFactory;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.EndpointChannel;
import com.palantir.dialogue.EndpointChannelFactory;
import com.palantir.dialogue.HttpMethod;
import com.palantir.dialogue.PathTemplate;
import com.palantir.dialogue.Request;
import com.palantir.dialogue.Response;
import com.palantir.dialogue.Serializer;
import com.palantir.dialogue.TypeMarker;
import com.palantir.dialogue.UrlBuilder;
import com.palantir.dialogue.annotations.ConjureErrorDecoder;
import com.palantir.dialogue.annotations.DefaultParameterSerializer;
import com.palantir.dialogue.annotations.ErrorHandlingDeserializerFactory;
import com.palantir.dialogue.annotations.ErrorHandlingVoidDeserializer;
import com.palantir.dialogue.annotations.Json;
import com.palantir.dialogue.annotations.ParameterSerializer;
import com.palantir.dialogue.annotations.ResponseDeserializer;
import com.palantir.tokens.auth.AuthHeader;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import java.util.List;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.UUID;
import javax.annotation.processing.Generated;

@Generated("com.palantir.dialogue.annotations.processor.generate.DialogueServiceFactoryGenerator")
public final class MyServiceDialogueServiceFactory implements DialogueServiceFactory<MyService> {
    @Override
    public MyService create(EndpointChannelFactory endpointChannelFactory, ConjureRuntime runtime) {
        return new MyService() {
            private final ParameterSerializer _parameterSerializer = DefaultParameterSerializer.INSTANCE;

            private final Serializer<String> greetSerializer = new Json().serializerFor(new TypeMarker<String>() {});

            private final EndpointChannel greetChannel = endpointChannelFactory.endpoint(Endpoints.greet);

            private final Deserializer<String> greetDeserializer = new ErrorHandlingDeserializerFactory<>(
                            new Json(), new ConjureErrorDecoder())
                    .deserializerFor(new TypeMarker<String>() {});

            private final EndpointChannel getGreetingAsyncChannel =
                    endpointChannelFactory.endpoint(Endpoints.getGreetingAsync);

            private final Deserializer<String> getGreetingAsyncDeserializer = new ErrorHandlingDeserializerFactory<>(
                            new CustomStringDeserializer(), new ConjureErrorDecoder())
                    .deserializerFor(new TypeMarker<String>() {});

            private final EndpointChannel customRequestChannel =
                    endpointChannelFactory.endpoint(Endpoints.customRequest);

            private final Deserializer<Void> customRequestDeserializer = new ErrorHandlingVoidDeserializer(
                    runtime.bodySerDe().emptyBodyDeserializer(), new ConjureErrorDecoder());

            private final EndpointChannel customResponseChannel =
                    endpointChannelFactory.endpoint(Endpoints.customResponse);

            private final Deserializer<Response> customResponseDeserializer = new ErrorHandlingDeserializerFactory<>(
                            new ResponseDeserializer(), new ConjureErrorDecoder())
                    .deserializerFor(new TypeMarker<Response>() {});

            private final MyCustomTypeParamEncoder paramsQuery8Encoder = new MyCustomTypeParamEncoder();

            private final MyCustomTypeParamEncoder paramsQuery9Encoder = new MyCustomTypeParamEncoder();

            private final MyCustomStringParamEncoder paramsQuery10Encoder = new MyCustomStringParamEncoder();

            private final MyCustomStringParamEncoder paramsQuery11Encoder = new MyCustomStringParamEncoder();

            private final MyCustomTypeParamEncoder paramsPath2Encoder = new MyCustomTypeParamEncoder();

            private final MyCustomTypeParamEncoder paramsHeader8Encoder = new MyCustomTypeParamEncoder();

            private final MyCustomTypeParamEncoder paramsHeader9Encoder = new MyCustomTypeParamEncoder();

            private final MyCustomStringParamEncoder paramsHeader10Encoder = new MyCustomStringParamEncoder();

            private final MyCustomStringParamEncoder paramsHeader11Encoder = new MyCustomStringParamEncoder();

            private final Serializer<MySerializableType> paramsSerializer =
                    new MySerializableTypeBodySerializer().serializerFor(new TypeMarker<MySerializableType>() {});

            private final EndpointChannel paramsChannel = endpointChannelFactory.endpoint(Endpoints.params);

            private final Deserializer<Void> paramsDeserializer = new ErrorHandlingVoidDeserializer(
                    runtime.bodySerDe().emptyBodyDeserializer(), new ConjureErrorDecoder());

            @Override
            public String greet(AuthHeader authHeader, String greeting) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams("Authorization", _parameterSerializer.serializeAuthHeader(authHeader));
                _request.body(greetSerializer.serialize(greeting));
                return runtime.clients().callBlocking(greetChannel, _request.build(), greetDeserializer);
            }

            @Override
            public ListenableFuture<String> getGreetingAsync() {
                Request.Builder _request = Request.builder();
                return runtime.clients().call(getGreetingAsyncChannel, _request.build(), getGreetingAsyncDeserializer);
            }

            @Override
            public void customRequest(EmptyRequestBody requestBody) {
                Request.Builder _request = Request.builder();
                _request.body(requestBody);
                runtime.clients().callBlocking(customRequestChannel, _request.build(), customRequestDeserializer);
            }

            @Override
            public Response customResponse() {
                Request.Builder _request = Request.builder();
                return runtime.clients()
                        .callBlocking(customResponseChannel, _request.build(), customResponseDeserializer);
            }

            @Override
            public void params(
                    String query1,
                    Optional<String> query2,
                    OptionalInt query3,
                    OptionalLong query4,
                    OptionalDouble query5,
                    List<String> query6,
                    MyAliasType query7,
                    MyCustomType query8,
                    Optional<MyCustomType> query9,
                    String query10,
                    Optional<String> query11,
                    UUID path1,
                    MyCustomType path2,
                    String header1,
                    Optional<String> header2,
                    OptionalInt header3,
                    OptionalLong header4,
                    OptionalDouble header5,
                    List<String> header6,
                    MyAliasType header7,
                    MyCustomType header8,
                    Optional<MyCustomType> header9,
                    String header10,
                    Optional<String> header11,
                    MySerializableType body) {
                Request.Builder _request = Request.builder();
                _request.putQueryParams("q1", _parameterSerializer.serializeString(query1));
                if (query2.isPresent()) {
                    _request.putQueryParams("q2", _parameterSerializer.serializeString(query2.get()));
                }
                if (query3.isPresent()) {
                    _request.putQueryParams("q3", _parameterSerializer.serializeInteger(query3.getAsInt()));
                }
                if (query4.isPresent()) {
                    _request.putQueryParams("q4", _parameterSerializer.serializeLong(query4.getAsLong()));
                }
                if (query5.isPresent()) {
                    _request.putQueryParams("q5", _parameterSerializer.serializeDouble(query5.getAsDouble()));
                }
                query6.forEach(query6Element -> {
                    _request.putQueryParams("q6", _parameterSerializer.serializeString(query6Element));
                });
                _request.putQueryParams("q7", _parameterSerializer.serializeString(query7.get()));
                _request.putAllQueryParams("q8", paramsQuery8Encoder.toParamValues(query8));
                if (query9.isPresent()) {
                    _request.putAllQueryParams("q9", paramsQuery9Encoder.toParamValues(query9.get()));
                }
                _request.putAllQueryParams("q10", paramsQuery10Encoder.toParamValues(query10));
                if (query11.isPresent()) {
                    _request.putAllQueryParams("q11", paramsQuery11Encoder.toParamValues(query11.get()));
                }
                _request.putPathParams("path1", _parameterSerializer.serializeUuid(path1));
                _request.putPathParams("path2", paramsPath2Encoder.toParamValue(path2));
                _request.putHeaderParams("h1", _parameterSerializer.serializeString(header1));
                if (header2.isPresent()) {
                    _request.putHeaderParams("h2", _parameterSerializer.serializeString(header2.get()));
                }
                if (header3.isPresent()) {
                    _request.putHeaderParams("h3", _parameterSerializer.serializeInteger(header3.getAsInt()));
                }
                if (header4.isPresent()) {
                    _request.putHeaderParams("h4", _parameterSerializer.serializeLong(header4.getAsLong()));
                }
                if (header5.isPresent()) {
                    _request.putHeaderParams("h5", _parameterSerializer.serializeDouble(header5.getAsDouble()));
                }
                header6.forEach(header6Element -> {
                    _request.putHeaderParams("h6", _parameterSerializer.serializeString(header6Element));
                });
                _request.putHeaderParams("h7", _parameterSerializer.serializeString(header7.get()));
                _request.putAllHeaderParams("h8", paramsHeader8Encoder.toParamValues(header8));
                if (header9.isPresent()) {
                    _request.putAllHeaderParams("h9", paramsHeader9Encoder.toParamValues(header9.get()));
                }
                _request.putAllHeaderParams("h10", paramsHeader10Encoder.toParamValues(header10));
                if (header11.isPresent()) {
                    _request.putAllHeaderParams("h11", paramsHeader11Encoder.toParamValues(header11.get()));
                }
                _request.body(paramsSerializer.serialize(body));
                runtime.clients().callBlocking(paramsChannel, _request.build(), paramsDeserializer);
            }
        };
    }

    private enum Endpoints implements Endpoint {
        greet {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("greet").build();

            @Override
            public void renderPath(ListMultimap<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.POST;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "greet";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        getGreetingAsync {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("greeting").build();

            @Override
            public void renderPath(ListMultimap<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.GET;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "getGreetingAsync";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        customRequest {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("custom").fixed("request").build();

            @Override
            public void renderPath(ListMultimap<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.PUT;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "customRequest";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        customResponse {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("custom").fixed("request1").build();

            @Override
            public void renderPath(ListMultimap<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.PUT;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "customResponse";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        params {
            private final PathTemplate pathTemplate = PathTemplate.builder()
                    .fixed("params")
                    .variable("path1")
                    .variable("path2")
                    .build();

            @Override
            public void renderPath(ListMultimap<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.POST;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "params";
            }

            @Override
            public String version() {
                return VERSION;
            }
        };

        private static final String VERSION = Optional.ofNullable(
                        MyService.class.getPackage().getImplementationVersion())
                .orElse("0.0.0");
    }
}
