package com.palantir.myservice.service;

import com.google.common.util.concurrent.ListenableFuture;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.DialogueServiceFactory;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.EndpointChannelFactory;
import com.palantir.dialogue.HttpMethod;
import com.palantir.dialogue.PathTemplate;
import com.palantir.dialogue.RequestBody;
import com.palantir.dialogue.Response;
import com.palantir.dialogue.UrlBuilder;
import java.lang.Override;
import java.lang.String;
import java.lang.UnsupportedOperationException;
import java.util.Map;
import java.util.OptionalInt;
import java.util.UUID;
import javax.annotation.processing.Generated;

@Generated("com.palantir.dialogue.annotations.processor.generate.DialogueServiceFactoryGenerator")
public final class MyServiceDialogueServiceFactory implements DialogueServiceFactory<MyService> {
    @Override
    public MyService create(EndpointChannelFactory endpointChannelFactory, ConjureRuntime runtime) {
        return new MyService() {
            @Override
            public String greet(String greeting) {
                throw new UnsupportedOperationException();
            }

            @Override
            public ListenableFuture<String> getGreetingAsync() {
                throw new UnsupportedOperationException();
            }

            @Override
            public void customRequest(RequestBody requestBody) {
                throw new UnsupportedOperationException();
            }

            @Override
            public Response customResponse() {
                throw new UnsupportedOperationException();
            }

            @Override
            public void params(
                    String query,
                    UUID myPathParam,
                    MyCustomParamType myPathParam2,
                    int requestHeaderValue,
                    OptionalInt maybeRequestHeaderValue,
                    MySerializableType body) {
                throw new UnsupportedOperationException();
            }
        };
    }

    private enum Endpoints implements Endpoint {
        greet {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("greet").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.POST;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "greet";
            }

            @Override
            public String version() {
                return "0.0.0";
            }
        },

        getGreetingAsync {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("greeting").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.GET;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "getGreetingAsync";
            }

            @Override
            public String version() {
                return "0.0.0";
            }
        },

        customRequest {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("custom").fixed("request").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.PUT;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "customRequest";
            }

            @Override
            public String version() {
                return "0.0.0";
            }
        },

        customResponse {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("custom").fixed("request1").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.PUT;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "customResponse";
            }

            @Override
            public String version() {
                return "0.0.0";
            }
        },

        params {
            private final PathTemplate pathTemplate = PathTemplate.builder()
                    .fixed("params")
                    .variable("myPathParam")
                    .variable("myPathParam2")
                    .build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.POST;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "params";
            }

            @Override
            public String version() {
                return "0.0.0";
            }
        }
    }
}
