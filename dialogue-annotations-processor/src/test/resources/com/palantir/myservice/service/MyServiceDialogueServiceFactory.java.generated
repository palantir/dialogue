package com.palantir.myservice.service;

import com.google.common.util.concurrent.ListenableFuture;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.Deserializer;
import com.palantir.dialogue.DialogueServiceFactory;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.EndpointChannel;
import com.palantir.dialogue.EndpointChannelFactory;
import com.palantir.dialogue.HttpMethod;
import com.palantir.dialogue.PathTemplate;
import com.palantir.dialogue.Request;
import com.palantir.dialogue.RequestBody;
import com.palantir.dialogue.Response;
import com.palantir.dialogue.Serializer;
import com.palantir.dialogue.TypeMarker;
import com.palantir.dialogue.UrlBuilder;
import com.palantir.dialogue.annotations.DefaultParameterSerializer;
import com.palantir.dialogue.annotations.Json;
import com.palantir.dialogue.annotations.ParameterSerializer;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.UUID;
import javax.annotation.processing.Generated;

@Generated("com.palantir.dialogue.annotations.processor.generate.DialogueServiceFactoryGenerator")
public final class MyServiceDialogueServiceFactory implements DialogueServiceFactory<MyService> {
    @Override
    public MyService create(EndpointChannelFactory endpointChannelFactory, ConjureRuntime runtime) {
        return new MyService() {
            private final ParameterSerializer _parameterSerializer = DefaultParameterSerializer.INSTANCE;

            private final Serializer<String> greetSerializer = new Json().serializerFor(new TypeMarker<String>() {});

            private final EndpointChannel greetChannel = endpointChannelFactory.endpoint(Endpoints.greet);

            private final Deserializer<String> greetDeserializer =
                    new Json().deserializerFor(new TypeMarker<String>() {});

            private final EndpointChannel getGreetingAsyncChannel =
                    endpointChannelFactory.endpoint(Endpoints.getGreetingAsync);

            private final Deserializer<String> getGreetingAsyncDeserializer =
                    new CustomStringDeserializer().deserializerFor(new TypeMarker<String>() {});

            private final EndpointChannel customRequestChannel =
                    endpointChannelFactory.endpoint(Endpoints.customRequest);

            private final Deserializer<Void> customRequestDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final EndpointChannel customResponseChannel =
                    endpointChannelFactory.endpoint(Endpoints.customResponse);

            private final Deserializer<Response> customResponseDeserializer =
                    new MyResponseDeserializer().deserializerFor(new TypeMarker<Response>() {});

            private final Serializer<MySerializableType> paramsSerializer =
                    new MySerializableTypeBodySerializer().serializerFor(new TypeMarker<MySerializableType>() {});

            private final EndpointChannel paramsChannel = endpointChannelFactory.endpoint(Endpoints.params);

            private final Deserializer<Void> paramsDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            @Override
            public String greet(String greeting) {
                Request.Builder _request = Request.builder();
                _request.body(greetSerializer.serialize(greeting));
                return runtime.clients().callBlocking(greetChannel, _request.build(), greetDeserializer);
            }

            @Override
            public ListenableFuture<String> getGreetingAsync() {
                Request.Builder _request = Request.builder();
                return runtime.clients().call(getGreetingAsyncChannel, _request.build(), getGreetingAsyncDeserializer);
            }

            @Override
            public void customRequest(RequestBody requestBody) {
                Request.Builder _request = Request.builder();
                _request.body(requestBody);
                runtime.clients().callBlocking(customRequestChannel, _request.build(), customRequestDeserializer);
            }

            @Override
            public Response customResponse() {
                Request.Builder _request = Request.builder();
                return runtime.clients()
                        .callBlocking(customResponseChannel, _request.build(), customResponseDeserializer);
            }

            @Override
            public void params(
                    String query,
                    UUID myPathParam,
                    MyCustomParamType myPathParam2,
                    int requestHeaderValue,
                    Optional<String> maybeCustomOptionalHeader1Value,
                    OptionalInt maybeCustomOptionalHeader2Value,
                    Optional<MyCustomParamType> maybeCustomOptionalHeader3Value,
                    MySerializableType body) {
                Request.Builder _request = Request.builder();
                _request.putQueryParams("q", _parameterSerializer.serializeString(query));
                _request.putPathParams("myPathParam", _parameterSerializer.serializeUuid(myPathParam));
                _request.putHeaderParams("Custom-Header", _parameterSerializer.serializeInteger(requestHeaderValue));
                if (maybeCustomOptionalHeader1Value.isPresent()) {
                    _request.putHeaderParams(
                            "Custom-Optional-Header1",
                            _parameterSerializer.serializeString(maybeCustomOptionalHeader1Value.get()));
                }
                if (maybeCustomOptionalHeader2Value.isPresent()) {
                    _request.putHeaderParams(
                            "Custom-Optional-Header2",
                            _parameterSerializer.serializeInteger(maybeCustomOptionalHeader2Value.getAsInt()));
                }
                _request.body(paramsSerializer.serialize(body));
                runtime.clients().callBlocking(paramsChannel, _request.build(), paramsDeserializer);
            }
        };
    }

    private enum Endpoints implements Endpoint {
        greet {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("greet").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.POST;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "greet";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        getGreetingAsync {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("greeting").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.GET;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "getGreetingAsync";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        customRequest {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("custom").fixed("request").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.PUT;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "customRequest";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        customResponse {
            private final PathTemplate pathTemplate =
                    PathTemplate.builder().fixed("custom").fixed("request1").build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.PUT;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "customResponse";
            }

            @Override
            public String version() {
                return VERSION;
            }
        },

        params {
            private final PathTemplate pathTemplate = PathTemplate.builder()
                    .fixed("params")
                    .variable("myPathParam")
                    .variable("myPathParam2")
                    .build();

            @Override
            public void renderPath(Map<String, String> params, UrlBuilder url) {
                pathTemplate.fill(params, url);
            }

            @Override
            public HttpMethod httpMethod() {
                return HttpMethod.POST;
            }

            @Override
            public String serviceName() {
                return "MyService";
            }

            @Override
            public String endpointName() {
                return "params";
            }

            @Override
            public String version() {
                return VERSION;
            }
        };

        private static final String VERSION = Optional.ofNullable(
                        MyService.class.getPackage().getImplementationVersion())
                .orElse("0.0.0");
    }
}
